- name: Create EC2 Instances
  hosts: localhost
  connection: local
  become: yes
  vars:
    # ansible_python_interpreter: /usr/bin/python3  # adjust if needed
    ami_id: ami-09c813fb71547fc4f
    subnet_id: subnet-0e814051cd870f5f7
    sg_id: sg-0edf79ad0013d26e2
    instance_type: t3.micro
    region: us-east-1
    zone: tuktukride.online
    instances:
      - mysql
      - backend
      - front

  tasks:
    - name: Ensure boto3 and botocore are installed
      ansible.builtin.pip:
        name: "{{ item }}"
        executable: pip3
      loop:
        - boto3
        - botocore

    - name: Create EC2 instances
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        region: "{{ region }}"
        image_id: "{{ ami_id }}"
        instance_type: "{{ instance_type }}"
        subnet_id: "{{ subnet_id }}"
        security_group: "{{ sg_id }}"
        wait: yes
      loop: "{{ instances }}"
      register: ec2_info

    - name: Print ec2_info
      ansible.builtin.debug:
        msg: "{{ ec2_info }}"
    
    - name: Print private IP address
      ansible.builtin.debug:
        msg: "{{ item.instances[0].private_ip_address }}"
      loop: "{{ ec2_info.results }}"


    - name: create private ip r53 records
      amazon.aws.route53:
          state: present
          zone: "{{ zone }}"
          record: "{{ item.item}}.{{ zone }}"
          type: A
          ttl: 1
          value: "{{ item.instances[0].private_ip_address }}"
          wait: true
          overwrite: true
      loop: "{{ ec2_info.results }}"

    - name: create public ip for frontend
      amazon.aws.route53:
          state: present
          zone: "{{ zone }}"
          record: "{{ zone }}"
          type: A
          ttl: 1
          value: "{{ item.instances[0].public_ip_address }}"
          wait: true
          overwrite: true
      loop: "{{ ec2_info.results }}"
      when: item.item == "frontend"